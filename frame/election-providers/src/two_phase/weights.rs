// This file is part of Substrate.

// Copyright (C) 2020 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_two_phase_election_provider
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 2.0.0
//! DATE: 2020-12-29, STEPS: [10, ], REPEAT: 5, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain
// dev
// --steps
// 10
// --repeat
// 5
// --extrinsic
// *
// --execution=native
// --wasm-execution=compiled
// --output
// .
// --header
// ./HEADER
// --pallet
// pallet_two_phase_election_provider
// --template=./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_two_phase_election_provider.
pub trait WeightInfo {
	fn on_initialize_nothing() -> Weight;
	fn on_initialize_open_signed() -> Weight;
	fn on_initialize_open_unsigned() -> Weight;
	fn finalize_signed_phase_accept_solution() -> Weight;
	fn finalize_signed_phase_reject_solution() -> Weight;
	fn submit(c: u32) -> Weight;
	fn submit_unsigned(v: u32, t: u32, a: u32, d: u32) -> Weight;
	fn feasibility_check(v: u32, t: u32, a: u32, d: u32) -> Weight;
}

/// Weights for pallet_two_phase_election_provider using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize_nothing() -> Weight {
		(32_000_000 as Weight).saturating_add(T::DbWeight::get().reads(7 as Weight))
	}
	fn on_initialize_open_signed() -> Weight {
		(103_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn on_initialize_open_unsigned() -> Weight {
		(107_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn finalize_signed_phase_accept_solution() -> Weight {
		(38_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn finalize_signed_phase_reject_solution() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn submit(c: u32) -> Weight {
		(57_926_000 as Weight)
			// Standard Error: 153_000
			.saturating_add((1_267_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn submit_unsigned(v: u32, _t: u32, a: u32, d: u32) -> Weight {
		(260_195_000 as Weight)
			// Standard Error: 1_138_000
			.saturating_add((872_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 1_138_000
			.saturating_add((37_162_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 5_690_000
			.saturating_add((18_018_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn feasibility_check(v: u32, _t: u32, a: u32, d: u32) -> Weight {
		(1_819_529_000 as Weight)
			// Standard Error: 1_260_000
			.saturating_add((1_051_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 2_100_000
			.saturating_add((21_722_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 4_201_000
			.saturating_add((10_227_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(d as Weight)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize_nothing() -> Weight {
		(32_000_000 as Weight).saturating_add(RocksDbWeight::get().reads(7 as Weight))
	}
	fn on_initialize_open_signed() -> Weight {
		(103_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn on_initialize_open_unsigned() -> Weight {
		(107_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn finalize_signed_phase_accept_solution() -> Weight {
		(38_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn finalize_signed_phase_reject_solution() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn submit(c: u32) -> Weight {
		(57_926_000 as Weight)
			// Standard Error: 153_000
			.saturating_add((1_267_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn submit_unsigned(v: u32, _t: u32, a: u32, d: u32) -> Weight {
		(260_195_000 as Weight)
			// Standard Error: 1_138_000
			.saturating_add((872_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 1_138_000
			.saturating_add((37_162_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 5_690_000
			.saturating_add((18_018_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn feasibility_check(v: u32, _t: u32, a: u32, d: u32) -> Weight {
		(1_819_529_000 as Weight)
			// Standard Error: 1_260_000
			.saturating_add((1_051_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 2_100_000
			.saturating_add((21_722_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 4_201_000
			.saturating_add((10_227_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(d as Weight)))
	}
}
