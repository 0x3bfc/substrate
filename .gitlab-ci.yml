# .gitlab-ci.yml
#
# substrate
#
# pipelines can be triggered manually in the web
# setting DEPLOY_TAG will only deploy the tagged image

# SAMPLE JOB TEMPLATE - This is not a complete example but is enough to build a
# simple CI job. For full documentation, visit https://docs.gitlab.com/ee/ci/yaml/
#
# my-example-job:
#   stage:                           test # One of the stages listed below this job (required)
#   image:                           parity/tools:latest # Any docker image (required)
#   allow_failure:                   true # Allow the pipeline to continue if this job fails (default: false)
#   dependencies:
#     - build-rust-doc-release # Any jobs that are required to run before this job (optional)
#   variables:
#     MY_ENVIRONMENT_VARIABLE:       "some useful value" # Environment variables passed to the job (optional)
#   script:
#     - echo "List of shell commands to run in your job"
#     - echo "You can also just specify a script here, like so:"
#     - ./.maintain/gitlab/my_amazing_script.sh

stages:
  - test
  - build
  - post-build-test
  - publish
  - kubernetes
  - flaming-fir

image:                             ${REGISTRY}/substrate-ci-linux:latest
# image:                             parity/rust-builder:b2c2c71d-20200217

variables:
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       100
  CARGO_HOME:                      "/ci-cache/${CI_PROJECT_NAME}/cargo/${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}"
  CARGO_TARGET_DIR:                "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}"
  REGISTRY:                        registry.parity.io/parity/infrastructure/scripts
  # SCCACHE_DIR:                     "/ci-cache/${CI_PROJECT_NAME}/sccache"
  CARGO_INCREMENTAL:               0
  CI_SERVER_NAME:                  "GitLab CI"
  DOCKER_OS:                       "debian:stretch"
  ARCH:                            "x86_64"
  # FIXME set to release
  CARGO_UNLEASH_INSTALL_PARAMS:    "--version 1.0.0-alpha.10"
  CARGO_UNLEASH_PKG_DEF:           "--skip node node-* pallet-template pallet-example pallet-example-* subkey chain-spec-builder sp-arithmetic-fuzzer"
  CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_RUNNER: "wasm-bindgen-test-runner"
  WASM_BINDGEN_TEST_TIMEOUT:                  120
  CHROMEDRIVER_ARGS:                          "--log-level=INFO --whitelisted-ips=127.0.0.1"


.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - artifacts/


.docker-env:                       &docker-env
  before_script:
    - rustup show
    - cargo --version
    # - mkdir -p ${CARGO_HOME}; touch ${CARGO_HOME}/config
    # if there is no directory for this $CI_COMMIT_REF_NAME/$CI_JOB_NAME
    # create such directory and
    # create hardlinks recursively of all the files from the master/$CI_JOB_NAME if it exists
    # - if [[ ! -d $CARGO_TARGET_DIR ]]; then
    #     mkdir -p /ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME};
    #     cp -al /ci-cache/${CI_PROJECT_NAME}/targets/master/${CI_JOB_NAME}
    #       /ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME} ||
    #       echo "_____No such target dir, proceeding from scratch_____";
    #   fi
    - sccache -s
  after_script:
    - echo "_____ Clean target dir _____"
    - cd ./target/release/
    - ls -a
    - for binary in $(find . -maxdepth 1 -type f ! -size 0 -exec grep -IL . "{}" \; | cut -c 3- )
        do
          rm -rf $binary
        done
    - find ./target/{debug,release} -maxdepth 1 -type f -delete;
    - rm -f  ./target/.rustc_info.json;
    - rm -rf ./target/{debug,release}/{deps,.fingerprint}/
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - schedules
    - web
    - /^[0-9]+$/                   # PRs
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  dependencies:                    []
  interruptible:                   true
  tags:
    - k2

.build-only:                       &build-only
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - /^pre-v[0-9]+\.[0-9]+-[0-9a-f]+$/
    - web



#### stage:                        test


cargo-audit:
  stage:                           test
  <<:                              *docker-env
  except:
    - /^[0-9]+$/
  script:
    - cargo audit
  allow_failure:                   true


cargo-check-benches:
  stage:                           test
  <<:                              *docker-env
  script:
    - BUILD_DUMMY_WASM_BINARY=1 time cargo +nightly check --benches --all
    - sccache -s


cargo-check-subkey:
  stage:                           test
  <<:                              *docker-env
  except:
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
  script:
    - cd ./bin/utils/subkey
    - BUILD_DUMMY_WASM_BINARY=1 time cargo check --release
    - sccache -s

#### stage:                        build

test-linux-stable:                 &test-linux
  stage:                           build
  <<:                              *docker-env
  # debug
  variables:
    # TODO: $ echo $CARGO_TARGET_DIR
    # /ci-cache/substrate/targets/4460/build-linux-substrate
    # https://gitlab.parity.io/parity/substrate/-/jobs/339591
    # TODO: doesn't reuse build-linux-substrate cache, needs checking locally
    # CARGO_TARGET_DIR:              "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/build-linux-substrate"
    # Enable debug assertions since we are running optimized builds for testing
    # but still want to have debug assertions.
    RUSTFLAGS: -Cdebug-assertions=y
  # needs:
  #   - build-linux-substrate
  except:
    variables:
      - $DEPLOY_TAG
  script:
    - WASM_BUILD_NO_COLOR=1 time cargo test --all --release --verbose --locked |&
        tee output.log
    - sccache -s


#### stage:                        publish

build-linux-substrate:             &build-binary
  stage:                           publish
  # <<:                              *collect-artifacts
  <<:                              *docker-env
  # <<:                              *build-only
  before_script:
    - mkdir -p ./artifacts/substrate/
  except:
    variables:
      - $DEPLOY_TAG
  script:
    - WASM_BUILD_NO_COLOR=1 time cargo build --release --verbose

build-linux-subkey:
  <<:                              *build-binary
  before_script:
    - mkdir -p ./artifacts/subkey
  script:
    - cd ./bin/utils/subkey
    - BUILD_DUMMY_WASM_BINARY=1 time cargo build --release --verbose
