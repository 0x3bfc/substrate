# .gitlab-ci.yml
#
# substrate
#
# pipelines can be triggered manually in the web
# setting DEPLOY_TAG will only deploy the tagged image


stages:
  - test
  - build
  - publish
  - kubernetes
  - flaming-fir

image:                             ${REGISTRY}/substrate-ci-linux:latest

variables:
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       100
  CARGO_HOME:                      "/ci-cache/${CI_PROJECT_NAME}/cargo/${CI_JOB_NAME}"
  CARGO_TARGET_DIR:                "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}"
  REGISTRY:                        registry.parity.io/parity/infrastructure/scripts
  CI_SERVER_NAME:                  "GitLab CI"
  DOCKER_OS:                       "debian:stretch"
  ARCH:                            "x86_64"


.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - artifacts/


.docker-env:                       &docker-env
  before_script:
    - rustup show
    - cargo --version
    - mkdir -p ${CARGO_HOME}; touch ${CARGO_HOME}/config
    - mkdir -p ${CARGO_TARGET_DIR}
    - sccache -s
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - schedules
    - web
    - /^[0-9]+$/                   # PRs
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  dependencies:                    []
  interruptible:                   true
  tags:
    - ci3

.build-only:                       &build-only
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - /^pre-v[0-9]+\.[0-9]+-[0-9a-f]+$/
    - web



#### stage:                        test

# build-linux-substrate:             &build-binary
#   stage:                           test
#   <<:                              *collect-artifacts
#   <<:                              *docker-env
#   # <<:                              *build-only
#   except:
#     variables:
#       - $DEPLOY_TAG
#   before_script:
#     - mkdir -p ./artifacts/substrate/
#   script:
#     - WASM_BUILD_NO_COLOR=1 time cargo build --release --verbose
#     - cp ${CARGO_TARGET_DIR}/release/substrate ./artifacts/substrate/.
#     - echo -n "Substrate version = "
#     - if [ "${CI_COMMIT_TAG}" ]; then
#         echo "${CI_COMMIT_TAG}" | tee ./artifacts/substrate/VERSION;
#       else
#         ./artifacts/substrate/substrate --version |
#           sed -n -r 's/^substrate ([0-9.]+.*-[0-9a-f]{7,13})-.*$/\1/p' |
#           tee ./artifacts/substrate/VERSION;
#       fi
#     - sha256sum ./artifacts/substrate/substrate | tee ./artifacts/substrate/substrate.sha256
#     - printf '\n# building node-template\n\n'
#     - ./.maintain/node-template-release.sh ./artifacts/substrate/substrate-node-template.tar.gz
#     - cp -r .maintain/docker/substrate.Dockerfile ./artifacts/substrate/

#### stage:                        build

test-linux-stable:                 &test-linux
  stage:                           build
  <<:                              *docker-env
  # debug
  image:                           parity/rust-builder:cc39bc7c-20200211
  variables:
    # TODO: $ echo $CARGO_TARGET_DIR
    # /ci-cache/substrate/targets/4460/build-linux-substrate
    # https://gitlab.parity.io/parity/substrate/-/jobs/339591
    # TODO: doesn't reuse build-linux-substrate cache, needs checking locally
    # CARGO_TARGET_DIR:              "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/build-linux-substrate"
    # Enable debug assertions since we are running optimized builds for testing
    # but still want to have debug assertions.
    RUSTFLAGS: -Cdebug-assertions=y
  # needs:
  #   - build-linux-substrate
  except:
    variables:
      - $DEPLOY_TAG
  script:
    - rustup +nightly show
    # - git checkout 7b00a5cb2a80be68bcda7b68ad9b183646b6924b
    # - echo $CARGO_TARGET_DIR
    - WASM_BUILD_NO_COLOR=1 time cargo test --all --release --verbose --locked --no-fail-fast |
        tee output.log
  # after_script:
  #   - echo "___Collecting warnings for check_warnings job___"
  #   - awk '/^warning:/,/^$/ { print }' output.log > ${CI_COMMIT_SHORT_SHA}_warnings.log
  # artifacts:
  #   name:                          $CI_COMMIT_SHORT_SHA
  #   expire_in:                     24 hrs
  #   paths:
  #     - ${CI_COMMIT_SHORT_SHA}_warnings.log

# node-exits:
#   stage:                           build
#   <<:                              *docker-env
#   variables:
#     GIT_STRATEGY:                  none
#     CARGO_TARGET_DIR:              "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/build-linux-substrate"
#   needs:
#     - build-linux-substrate
#   except:
#     - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
#   script:
#     - ${CARGO_TARGET_DIR}/release/substrate --dev &
#     - PID=$!
#     # Let the chain running for 60 seconds
#     - sleep 60
#     # Send `SIGINT` and give the process 30 seconds to end
#     - kill -INT $PID
#     - timeout 30 tail --pid=$PID -f /dev/null

# test-linux-stable-int:
#   <<:                              *test-linux
#   except:
#     refs:
#       - /^v[0-9]+\.[0-9]+.*$/      # i.e. v1.0, v2.1rc1
#     variables:
#       - $DEPLOY_TAG
#   variables:
#     CARGO_TARGET_DIR:              "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/build-linux-substrate"
#   script:
#     - echo "___Logs will be partly shown at the end in case of failure.___"
#     - echo "___Full log will be saved to the job artifacts only in case of failure.___"
#     - WASM_BUILD_NO_COLOR=1 RUST_LOG=sync=trace,consensus=trace,client=trace,state-db=trace,db=trace,forks=trace,state_db=trace,storage_cache=trace
#         time cargo test -p node-cli --release --verbose --locked -- --ignored
#         &> ${CI_COMMIT_SHORT_SHA}_int_failure.log
#     - sccache -s
#   after_script:
#     - awk '/FAILED|^error\[/,0' ${CI_COMMIT_SHORT_SHA}_int_failure.log
#   artifacts:
#     name:                          $CI_COMMIT_SHORT_SHA
#     when:                          on_failure
#     expire_in:                     24 hrs
#     paths:
#       - ${CI_COMMIT_SHORT_SHA}_int_failure.log
    

# trigger the pipeline
# control-trigger:
#   stage:                           publish
#   needs:
#     - build-linux-substrate
#   variables:
#     CARGO_TARGET_DIR:              ""
#     SUBSTRATE_VERSION:             tbdn
#     SUBSTRATE_COMMIT:              $CI_COMMIT_SHA
#     SUBSTRATE_JOB_ID:              $CI_JOB_ID
#     SUBSTRATE_JOB_URL:             $CI_JOB_URL
#   trigger:
#     project:                       parity/srml-contracts-waterfall
#     branch:                        "28"
#     strategy:                      depend

# check_warnings:
#   stage:                           publish
#   <<:                              *docker-env
#   except:
#     variables:
#       - $DEPLOY_TAG
#   variables:
#     GIT_STRATEGY:                  none
#   needs:
#     - test-linux-stable
#   script:
#     - if [ -s ${CI_COMMIT_SHORT_SHA}_warnings.log ]; then
#         cat ${CI_COMMIT_SHORT_SHA}_warnings.log;
#         exit 1;
#       else
#         echo "___No warnings___";
#       fi
#   allow_failure:                   true
